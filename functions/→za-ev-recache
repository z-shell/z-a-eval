# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# Copyright 2021 Nicholas Serrano
# License: MIT

# Synopsis:
#   zi recache <plugin/snippet>
#

→za-ev-recache() {
  # Set the base and typically useful options.
  builtin emulate -LR zsh ${=${options[xtrace]:#off}:+-o xtrace}
  builtin setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

  (( ${+functions[.zi-compute-ice]} )) || builtin source ${ZI[BIN_DIR]}"/lib/zsh/side.zsh"
  local -A ICE
  local -a plugins snippets
  local entry dir filename is_snippet REPLY reply
  
  if (( ${#opt_help} )) {
    →z-a-eval-help-handler
    return $?
  }

  if [[ -z $2 ]] {
    +zi-message "{annex}eval-annex{ehi}:{rst} {info2}Recaching eval output of all plugins and snippets{rst}{…}"
    plugins=( "${ZI[PLUGINS_DIR]}"/**/evalcache.zsh(N:h:t) )
    plugins=( "${plugins[@]//---//}" )
    plugins=( "${plugins[@]:#_local/zi}" )
    plugins=( "${plugins[@]:#custom}" )
    snippets=( "${ZI[SNIPPETS_DIR]}"/**/evalcache.zsh(N:h) )
    snippets=( ${snippets[@]#${ZI[SNIPPETS_DIR]}/} )
    snippets=( ${snippets[@]/(#b)(http|https|ftp|ftps|scp)--/${match[1]}://} )
    snippets=( ${snippets[@]/--//} )
  } else {
    +zi-message "{annex}eval-annex{ehi}:{rst} {msg}Recaching eval output of {pid}$2{msg}{rst}{…}"
    .zi-compute-ice $2 "pack-nf" ICE dir filename is_snippet || return $?
    ((is_snippet)) && snippets=($2) || plugins=($2)
  }

  for entry in $plugins $snippets; do
    +zi-message "{annex}eval-annex{ehi}:{rst} {msg}Removing {pid}${entry}{msg} eval cache{rst}{…}"
    [[ -e "$dir" ]] || .zi-compute-ice $entry "pack-nf" ICE dir filename is_snippet || return $?
    command rm -f "$dir"/evalcache.{zsh,zsh.zwc}
    ((is_snippet)) && {
      →za-ev-atclone-handler snippet "" "$entry" "$dir" ""
    } || {
      →za-ev-atclone-handler plugin "" "" "$entry" "$dir" ""
    }
    unset dir
    ICE=()
  done
}
